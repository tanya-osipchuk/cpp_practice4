#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <ctime>
#include <string>
#include <vector>
#include <climits>

using namespace std;

const int arr_size = 5;

void quicksort(int mas[], int size) {
    int i = 0;
    int j = size - 1;

    int mid = mas[size / 2];

    do {
        while (mas[i] < mid) {
            i++;
        }
        while (mas[j] > mid) {
            j--;
        }

        if (i <= j) {
            swap(mas[i], mas[j]);
            i++;
            j--;
        }
    } while (i <= j);


    if (j > 0) {
        quicksort(mas, j + 1);
    }
    if (i < size) {
        quicksort(&mas[i], size - i);
    }
}
void Merge(vector <int>& A, int p, int q, int r)
{

    int n1, n2, i, j, k;

    n1 = q - p + 1;
    n2 = r - q;
    vector<int>L(n1);
    vector<int>R(n2);

    for (i = 0; i < n1; i++)
    {
        L[i] = A[p + i];
    }

    for (j = 0; j < n2; j++)
    {
        R[j] = A[q + j + 1];
    }
    i = 0, j = 0;

    for (k = p; i < n1 && j < n2; k++)
    {
        if (L[i] < R[j])
        {
            A[k] = L[i++];
        }
        else
        {
            A[k] = R[j++];
        }
    }

    while (i < n1)
    {
        A[k++] = L[i++];
    }

    while (j < n2)
    {
        A[k++] = R[j++];
    }
}

void MergeSort(vector<int>& A, int p, int r)
{
    int q;
    if (p < r)
    {
        q = (p + r) / 2;
        MergeSort(A, p, q);
        MergeSort(A, q + 1, r);
        Merge(A, p, q, r);
    }
}


int main() {

    int mas[6] = { 1,3,5,6,33,-1 };
    quicksort(mas, 6);
    for (int i = 0; i < 6; i++)cout << mas[i] << ' ';
    vector<int>A = { 1,3,5,6,33,-1 };
    MergeSort(A, 0, A.size() - 1);
    for (int i = 0; i < 6; i++)cout << mas[i] << ' ';
    return 0;
}
